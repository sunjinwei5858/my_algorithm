package com.sunjinwei.test;

/**
 * 用rand7实现rand10 腾讯高频面试题
 * 已有方法 rand7 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。
 * 不要使用系统的 Math.random() 方法。
 * 【这道题是由小的随机数生成大的随机数，其实大的随机数生成小的随机数是方便的 直接while判断 也是等概率的，但是由小的随机数生成大的随机数 也要等概率 那就需要思考一下】
 * 关键字：均匀!!!也就是等概率
 * 分析：
 * 第一步：rand7()一次 生成[1-7]; 继续rand7()一次 生成[2,14] 但是1没了 所以进行减1，也就是rand7()+rand7()-1，但是这样会造成不是等概率事件
 * 比如要得到5，有2+3或者3+2 要得到14就只有7+7
 * 所以简单的加法 就不是等概率事件了
 * 第二步：排除了加法，那就只有乘法了
 * 定理：
 * 如果rand_n能等概率生成1到n的随机整数，则有(rand_n()-1)*n+rand_n()能等概率生成[1-n*n]的随机整数
 * 定理继续扩展
 * 已知 rand_N() 可以等概率的生成[1, N]范围的随机数
 * 那么：
 * (rand_X() - 1) × Y + rand_Y() ==> 可以等概率的生成[1, X * Y]范围的随机数即实现了rand_XY()
 * 解释：
 * rand7()能等概率生成1-7
 * rand7()-1能等概率生成0-6
 * (rand7()-1)*7 能等概率生成{0, 7, 14, 21, 28, 35, 42}
 * (rand7()-1)*7+rand7() 能等概率生成1-49
 * <p>
 * 拒绝采样：如果某个采样结果不在要求的范围内 就丢弃它
 */
public class _17_rand10 {

    /**
     * 方法1：直接使用定理+拒绝采样 丢弃[11,49]数，只在[1,10]范围找，丢弃了太多的样 效率低
     *
     * @return
     */
    public int rand10_01() {
        while (true) {
            // 定理
            int num = (rand7() - 1) * 7 + rand7();
            //  拒绝采样
            if (num <= 10) {
                return num;
            }
        }
    }


    /**
     * 方法2：优化，就丢弃[41,49]范围的9个数，在[1,40]中找，但是效率还是有点慢 还可以继续优化
     *
     * @return
     */
    public int rand10_02() {
        while (true) {
            // 定理
            int num = (rand7() - 1) * 7 + rand7();
            // 拒绝采样
            if (num <= 40) {
                return 1 + num % 10;
            }
        }
    }

    /**
     * 方法3：继续优化，利用范围之外的值，尽量减少丢弃的值，提高命中率
     *
     * @return
     */
    public int rand10_03() {
        while (true) {
            // 第一次：【1-49】
            int num = (rand7() - 1) * 7 + rand7();
            // 如果在40以内 舍弃41-49
            if (num <= 40) {
                return 1 + num % 10;
            }
            // 走到这里 说明num在41-49 那就继续rand7()一轮 让生成的数在1-63
            // 那么如果生成的数在41...49怎么办呢？，这些数因为也是等概率的 ==》如果都减去40的话 那么就是[1-9]随机等概率 也就是rand9()
            // 我们可以重新把41...49通过num-40映射到1...9，可以把1...9重新看成一个通过rand9生成rand10的过程。
            // 第二次：【1-63】
            num = (num - 40 - 1) * 7 + rand7();
            if (num <= 60) {
                return 1 + num % 10;
            }
            // 说明num在61-63 那就继续rand7()一轮
            // 类比 其实就是rand3获取rand10的过程
            // 第三次【1-21】
            num = (num - 60 - 1) * 7 + rand7();
            if (num <= 20) {
                return 1 + num % 10;
            }
        }
    }


    /**
     * 生成[1,7]等概率随机数的方法
     *
     * @return
     */
    private int rand7() {
        return 0;
    }


}
